{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.5ff18a2f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}test?200x200`}/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nconst CardList = ({robots}) => {\n  //  if (true){throw new Error(\"no\")};\n  return (\n\n    <div>\n        {\n              robots.map((user, i) => {\n                 return (<Card\n                   key = {i}\n                   id = {user.id}\n                   name={user.name}\n                   email={user.email}\n                 />\n               );\n                   //when we loop something, we need to add key props\n                 // key props should have something that doesn't change, in this case should use id\n              })\n\n\n        }\n  </div>\n  )\n\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n      <div className=\"pa2\">\n      <input className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}//listen to the input event change\n       />\n      </div>\n      );\n\n}\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: \"5px solid black\", height: \"800px \"}}>\n      {props.children}\n    </div>\n  )\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) { //this is allow access to this.props in the constructor(which we end up not needing)\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Opps...</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\"\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\nimport { setSearchField, requestRobots } from \"../actions\";\n\n\nconst mapStateToProps = (state) => { //tell me what store's state i need to listen to\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\n//tell me what props i need to listent to  that are actions that need to get dispatched\nconst mapDispathToProps = (dispatch) => { //send actions into the reducers\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),//setSearchField in actions.js\n    onRequestRobots: () => dispatch(requestRobots())//withot redux-thunk, requestRobots(dispatch), 這樣這個action才是回傳object\n  };\n};\n\n\n\n\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();//呼叫fetch\n  }\n  // constructor() {\n  //   super()\n  //   this.state = {  //state is something can change and effect our app, it usually lives in a parent Component\n  //     robots: []  //似全域變數\n  //     searchfield: \"\",\n  //    }\n  // }\n\n  // componentDidMount() {\n  //   fetch(\"https://jsonplaceholder.typicode.com/users\")\n  //     .then(response =>  response.json())\n  //     .then(users => this.setState({ robots: users }));\n  //\n  // }\n  // onSearchChange = (event) => { //own function should add arrows, 可以使得class 全域變數在child Component使用, 也就是SearchBox\n  //   this.setState({searchfield: event.target.value})\n\n     // console.log(filteredRobots); //input tag will recieve the event argument\n  // }\n  render() {\n    // const {robots, searchfield} = this.state;\n    const { searchField, onSearchChange, robots, isPending } = this.props; //mapStateToProps & mapDispathToProps\n    const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending?\n      <h1>Loading</h1> :\n\n      (\n        <div className=\"tc\">\n          <h1 className=\"f1\">RoboFriends</h1>\n          <SearchBox searchChange = {onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots}/>\n          </ErrorBoundry>\n        </Scroll>\n        </div>\n      );\n\n\n  }\n\n}\nexport default connect(\n  mapStateToProps,\n  mapDispathToProps\n)(App);//subscribe any state change to the store, what state, action should I listen to\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({ //這樣的寫法可以避免使用return, 回傳一個object, 記得要用()來包住回傳的物件,這裡物件為{type: CHANGE_SEARCH_FIELD,..}\n  type: CHANGE_SEARCH_FIELD, //會什麼type 要額外import const, 因為若用string, 有可能misspelling 而不會報錯\n  payload: text\n});\n\n//higher order function\n//using redux-thunk, redux can listen actions return function, before this it can only understand actions return object\n//using redux-thunk, give the func dispatch method, so it can call some actions\nexport const requestRobots = () => (dispatch) => {//withot redux-thunk, export const requestRobots = (dispatch) =>這樣才能回傳object\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n\n//actions 與 deducers 之間的連動關係是靠 action.type\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\n//a promise have three states\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = { //初始條件\n  searchField: \"\"\n};\n//reducer is a pure func, does't modefy anything, same input get same result\nexport const searchRobots = (state = initialStateSearch, action = {}) => { //這邊action 代表一個object, 所以初始為empty object\n  switch (action.type) { //use switch 可以針對不同case作轉換\n    case CHANGE_SEARCH_FIELD: //這個reducer關心的action type\n      return Object.assign({}, state, { searchField: action.payload });// also, return {...state, searchField: action.payload}\n    default:\n      return state;\n  }\n};\n//注意reducer不會modefy object, ex: return state.searchField = ..., 而是create a new object來取代\n// 這樣可以保證同個名稱的input 導出的結果都是不變的, 因為我們沒修改任何物件,\n//這樣一來統一配送searchRobots這個reducer 到不同的components 觸發不同action 經由這個reducer 都會得到一樣的效果\n// action => reducer => store => make change\n//講白一點, 因為沒有動到中央store任何物件, 只有可能新增, 所以投擲不同action從店裡拿到的東西都是一樣的\n// 跟傳統state的觀念最大不同在於, 傳統每個componet 都有自己的state 不會直接影響其他人的state\n//而redux 則是建立一個統一存放state的store, 所以才要建立這個pure func的機制\n\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\"\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {//this reducer worries about searchRobots\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n    default:\n      return state;\n  }\n};\n\n//actions 與 deducers 之間的連動關係是靠 action.type\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\"; //provide store to smart component\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";//combineReducers combine all reducers into root.reducer\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport './index.css';\nimport App from \"./containers/App\";\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\n\nconst logger = createLogger(); //logger is a Middleware, every action dispatch to reducer will log in to console\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)//in order, thunkMiddleware first\n);\n\nReactDOM.render(\n\n    <div>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </div>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}